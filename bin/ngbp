#!/usr/bin/env node

process.title = 'ngbp';

// Node.js libs
var READLINE = require( 'readline' );
var SPAWN = require( 'child_process' ).spawn;

// 3rd Party Modules
var Q = require( 'q' );
var COLORS = require( 'colors' );
var FINDUP = require( 'findup-sync' );
var RESOLVE = require( 'resolve' ).sync;
var PREFIX = "[ngbp] ";

// Local libs
var PKG = require( './../package.json' );

function log ( msg ) {
  console.log( PREFIX + msg );
}

function writeln ( msg ) {
  console.log( msg );
}

function error ( msg, fatal ) {
  msg = PREFIX + msg;
  console.log( msg.red );

  if ( fatal ) {
    process.exit( 1 );
  }
}

function header ( msg ) {
  msg = PREFIX + msg;
  console.log( msg.underline.magenta );
}

function installNgbpIfNeeded () {
  var deferred = Q.defer();

  /**
   * Ensure there is a local installation of ngbp.
   */
  try {
    ngbpPath = RESOLVE( 'ngbp', { basedir: process.cwd() } );
    deferred.resolve( true );
  } catch ( e ) {
    error( "Encountered error: " + e );
    ngbpPath = FINDUP( 'lib/ngbp.js' );

    // No ngbp install found!
    if ( ngbpPath ) {
      deferred.resolve( true );
    } else {
      header( "Local ngbp not installed." );

      // Ensure the user is okay with installing it here.
      var rl = READLINE.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      rl.question( "Install ngbp in the current directory? [Yn] ", function ( answer ) {
        rl.close();

        if ( answer && [ 'y', 'Y', 'yes', 'Yes', 'YES' ].indexOf( answer ) === -1 ) {
          deferred.reject( "I can't function without a local ngbp installation." );
          return;
        }

        /**
         * This will install ngbp and its dependencies locally, and if there is a `package.json`
         * file it will save the requirement to the `devDependencies` array.
         */
        var npm = SPAWN( 'npm', [ 'install', '--save-dev', 'ngbp' ], {
          cwd: process.cwd()
        });

        npm.stderr.on( 'data', function ( data ) {
          if (/^execvp\(\)/.test( data ) ) {
            deferred.reject( "Could not start NPM." );
          }
        });

        npm.stdout.pipe( process.stdout );
        npm.stderr.pipe( process.stderr );

        npm.on( 'close', function ( code ) {
          if ( code === 0 ) {
            deferred.resolve( true );
          } else {
            deferred.reject( "NPM exited with status " + code + "." );
          }
        });
      });
    }
  }

  return deferred.promise;
}

/**
 * Print out the version, if necessary.
 */
if( process.argv.indexOf( '--version' ) !== -1 || process.argv.indexOf( '-V' ) !== -1 ) {
  writeln( "ngbp-cli v" + PKG.version );
}

/**
 * Ensure that NGBP is installed, then load the CLI.
 */
installNgbpIfNeeded()
.then( function () {
  return require( ngbpPath ).cli();
})
.catch( function ( err ) {
  console.log( err.stack );
  error( "Well, shoot-darn. " + err + " Exiting...", true );
});

